// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Client should mount with channel tabs 1`] = `
<Client
  channelLength={5}
  channels={
    Array [
      "one",
      "two",
    ]
  }
  closeChannel={[Function]}
  currentChannel=""
  joinChannel={[Function]}
  makeCurrentChannel={[Function]}
  messages={Array []}
  nick=""
  openExternal={[Function]}
  sendMessage={[Function]}
  userId={1}
>
  <div
    style={
      Object {
        "display": "flex",
        "flexDirection": "column",
        "height": "100%",
        "overflow": "hidden",
        "width": "100%",
      }
    }
  >
    <JoinModal
      isOpen={false}
      joinChannel={[Function]}
      onClose={[Function]}
    >
      <Modal
        ariaHideApp={true}
        bodyOpenClassName="ReactModal__Body--open"
        closeTimeoutMS={0}
        contentLabel="Join channel"
        isOpen={false}
        onRequestClose={[Function]}
        parentSelector={[Function]}
        portalClassName="ReactModalPortal"
        shouldCloseOnOverlayClick={true}
        style={
          Object {
            "content": Object {
              "bottom": "auto",
              "left": "50%",
              "marginRight": "-50%",
              "right": "auto",
              "top": "50%",
              "transform": "translate(-50%, -50%)",
            },
          }
        }
      />
    </JoinModal>
    <div
      style={
        Object {
          "backgroundColor": "#FE4590",
          "display": "flex",
          "flexDirection": "row",
          "flexShrink": 0,
        }
      }
    >
      <div
        style={
          Object {
            "alignItems": "flex-end",
            "display": "flex",
            "flexGrow": 1,
            "overflowX": "auto",
            "overflowY": "hidden",
            "padding": "0 5px",
          }
        }
      >
        <Tab
          closeTab={[Function]}
          isActive={false}
          tabClick={[Function]}
          tabName="0"
        >
          <div
            style={
              Object {
                "WebkitUserSelect": "none",
                "alignItems": "center",
                "backgroundColor": "rgba(255, 255, 255, 0.1)",
                "boxSizing": "border-box",
                "color": "white",
                "cursor": "pointer",
                "display": "flex",
                "fontWeight": 800,
                "height": 25,
                "margin": "0 2px",
                "padding": "0 0 0 10px",
                "transform": "skew(-15deg)",
              }
            }
          >
            <div
              onClick={[Function]}
              style={
                Object {
                  "transform": "skew(15deg)",
                }
              }
            >
              0
            </div>
            <div
              onClick={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "rgba(255, 255, 255, 0.15)",
                  "display": "flex",
                  "fontWeight": 400,
                  "height": "100%",
                  "margin": "0 0 0 10px",
                  "padding": "0 10px",
                }
              }
            >
              ×
            </div>
          </div>
        </Tab>
        <Tab
          closeTab={[Function]}
          isActive={false}
          tabClick={[Function]}
          tabName="1"
        >
          <div
            style={
              Object {
                "WebkitUserSelect": "none",
                "alignItems": "center",
                "backgroundColor": "rgba(255, 255, 255, 0.1)",
                "boxSizing": "border-box",
                "color": "white",
                "cursor": "pointer",
                "display": "flex",
                "fontWeight": 800,
                "height": 25,
                "margin": "0 2px",
                "padding": "0 0 0 10px",
                "transform": "skew(-15deg)",
              }
            }
          >
            <div
              onClick={[Function]}
              style={
                Object {
                  "transform": "skew(15deg)",
                }
              }
            >
              1
            </div>
            <div
              onClick={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "rgba(255, 255, 255, 0.15)",
                  "display": "flex",
                  "fontWeight": 400,
                  "height": "100%",
                  "margin": "0 0 0 10px",
                  "padding": "0 10px",
                }
              }
            >
              ×
            </div>
          </div>
        </Tab>
        <AddTab
          clickAddTab={[Function]}
        >
          <div
            onClick={[Function]}
            style={
              Object {
                "WebkitUserSelect": "none",
                "alignItems": "center",
                "backgroundColor": "rgb(241, 196, 15)",
                "boxSizing": "border-box",
                "color": "white",
                "cursor": "pointer",
                "display": "flex",
                "fontWeight": 800,
                "height": 25,
                "margin": "0 2px",
                "padding": "10px",
                "transform": "skew(-15deg)",
              }
            }
          >
            <span
              style={
                Object {
                  "transform": "skew(15deg)",
                }
              }
            >
              +
            </span>
          </div>
        </AddTab>
      </div>
      <div
        style={
          Object {
            "backgroundColor": "rgba(255, 255, 255, 0.4)",
            "color": "white",
            "display": "flex",
          }
        }
      >
        <div
          style={
            Object {
              "backgroundColor": "rgba(255, 255, 255, 0.8)",
              "height": "35px",
              "width": "35px",
            }
          }
        >
          <img
            src="https://a.ppy.sh/1_1262304000000.jpg"
            style={
              Object {
                "maxHeight": "100%",
              }
            }
          />
        </div>
        <div
          style={
            Object {
              "alignItems": "center",
              "display": "flex",
              "padding": 5,
            }
          }
        />
      </div>
    </div>
    <ChatView
      messages={Array []}
      selfNick=""
      style={
        Object {
          "flexGrow": 1,
          "marginBottom": 10,
          "overflowX": "hidden",
          "overflowY": "auto",
          "wordBreak": "break-word",
        }
      }
      userClicked={[Function]}
    >
      <div
        style={
          Object {
            "flexGrow": 1,
            "marginBottom": 10,
            "overflowX": "hidden",
            "overflowY": "auto",
            "wordBreak": "break-word",
          }
        }
      />
    </ChatView>
    <form
      onSubmit={[Function]}
      style={
        Object {
          "display": "flex",
          "flexShrink": 0,
          "height": 40,
        }
      }
    >
      <input
        onChange={[Function]}
        placeholder="Enter a message..."
        style={
          Object {
            "padding": 10,
          }
        }
        type="text"
        value=""
      />
      <input
        style={
          Object {
            "width": 200,
          }
        }
        type="submit"
        value="Send"
      />
    </form>
  </div>
</Client>
`;

exports[`Client should render 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    style={
        Object {
            "display": "flex",
            "flexDirection": "column",
            "height": "100%",
            "overflow": "hidden",
            "width": "100%",
          }
    }
>
    <JoinModal
        isOpen={false}
        joinChannel={[Function]}
        onClose={[Function]}
    />
    <div
        style={
            Object {
                "backgroundColor": "#FE4590",
                "display": "flex",
                "flexDirection": "row",
                "flexShrink": 0,
              }
        }
    >
        <div
            style={
                Object {
                    "alignItems": "flex-end",
                    "display": "flex",
                    "flexGrow": 1,
                    "overflowX": "auto",
                    "overflowY": "hidden",
                    "padding": "0 5px",
                  }
            }
        >
            <AddTab
                clickAddTab={[Function]}
            />
        </div>
        <div
            style={
                Object {
                    "backgroundColor": "rgba(255, 255, 255, 0.4)",
                    "color": "white",
                    "display": "flex",
                  }
            }
        >
            <div
                style={
                    Object {
                        "backgroundColor": "rgba(255, 255, 255, 0.8)",
                        "height": "35px",
                        "width": "35px",
                      }
                }
            >
                <img
                    src="https://a.ppy.sh/1_1262304000000.jpg"
                    style={
                        Object {
                            "maxHeight": "100%",
                          }
                    }
                />
            </div>
            <div
                style={
                    Object {
                        "alignItems": "center",
                        "display": "flex",
                        "padding": 5,
                      }
                }
            />
        </div>
    </div>
    <ChatView
        messages={Array []}
        selfNick=""
        style={
            Object {
                "flexGrow": 1,
                "marginBottom": 10,
                "overflowX": "hidden",
                "overflowY": "auto",
                "wordBreak": "break-word",
              }
        }
        userClicked={[Function]}
    />
    <form
        onSubmit={[Function]}
        style={
            Object {
                "display": "flex",
                "flexShrink": 0,
                "height": 40,
              }
        }
    >
        <input
            onChange={[Function]}
            placeholder="Enter a message..."
            style={
                Object {
                    "padding": 10,
                  }
            }
            type="text"
            value=""
        />
        <input
            style={
                Object {
                    "width": 200,
                  }
            }
            type="submit"
            value="Send"
        />
    </form>
</div>,
  "nodes": Array [
    <div
      style={
            Object {
                  "display": "flex",
                  "flexDirection": "column",
                  "height": "100%",
                  "overflow": "hidden",
                  "width": "100%",
                }
      }
>
      <JoinModal
            isOpen={false}
            joinChannel={[Function]}
            onClose={[Function]}
      />
      <div
            style={
                  Object {
                        "backgroundColor": "#FE4590",
                        "display": "flex",
                        "flexDirection": "row",
                        "flexShrink": 0,
                      }
            }
      >
            <div
                  style={
                        Object {
                              "alignItems": "flex-end",
                              "display": "flex",
                              "flexGrow": 1,
                              "overflowX": "auto",
                              "overflowY": "hidden",
                              "padding": "0 5px",
                            }
                  }
            >
                  <AddTab
                        clickAddTab={[Function]}
                  />
            </div>
            <div
                  style={
                        Object {
                              "backgroundColor": "rgba(255, 255, 255, 0.4)",
                              "color": "white",
                              "display": "flex",
                            }
                  }
            >
                  <div
                        style={
                              Object {
                                    "backgroundColor": "rgba(255, 255, 255, 0.8)",
                                    "height": "35px",
                                    "width": "35px",
                                  }
                        }
                  >
                        <img
                              src="https://a.ppy.sh/1_1262304000000.jpg"
                              style={
                                    Object {
                                          "maxHeight": "100%",
                                        }
                              }
                        />
                  </div>
                  <div
                        style={
                              Object {
                                    "alignItems": "center",
                                    "display": "flex",
                                    "padding": 5,
                                  }
                        }
                  />
            </div>
      </div>
      <ChatView
            messages={Array []}
            selfNick=""
            style={
                  Object {
                        "flexGrow": 1,
                        "marginBottom": 10,
                        "overflowX": "hidden",
                        "overflowY": "auto",
                        "wordBreak": "break-word",
                      }
            }
            userClicked={[Function]}
      />
      <form
            onSubmit={[Function]}
            style={
                  Object {
                        "display": "flex",
                        "flexShrink": 0,
                        "height": 40,
                      }
            }
      >
            <input
                  onChange={[Function]}
                  placeholder="Enter a message..."
                  style={
                        Object {
                              "padding": 10,
                            }
                  }
                  type="text"
                  value=""
            />
            <input
                  style={
                        Object {
                              "width": 200,
                            }
                  }
                  type="submit"
                  value="Send"
            />
      </form>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Client
        channelLength={5}
        channels={Array []}
        closeChannel={[Function]}
        currentChannel=""
        joinChannel={[Function]}
        makeCurrentChannel={[Function]}
        messages={Array []}
        nick=""
        openExternal={[Function]}
        sendMessage={[Function]}
        userId={1}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Client {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "displayMessages": Array [],
        "displayMessagesAmount": 50,
        "handleChangeMsg": [Function],
        "handleSubmit": [Function],
        "hideJoinModal": [Function],
        "props": Object {
          "channelLength": 5,
          "channels": Array [],
          "closeChannel": [Function],
          "currentChannel": "",
          "joinChannel": [Function],
          "makeCurrentChannel": [Function],
          "messages": Array [],
          "nick": "",
          "openExternal": [Function],
          "sendMessage": [Function],
          "userId": 1,
        },
        "refs": Object {},
        "showJoinModal": [Function],
        "state": Object {
          "msg": "",
          "showJoinModal": false,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
        "userClicked": [Function],
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          style={
                    Object {
                              "display": "flex",
                              "flexDirection": "column",
                              "height": "100%",
                              "overflow": "hidden",
                              "width": "100%",
                            }
          }
>
          <JoinModal
                    isOpen={false}
                    joinChannel={[Function]}
                    onClose={[Function]}
          />
          <div
                    style={
                              Object {
                                        "backgroundColor": "#FE4590",
                                        "display": "flex",
                                        "flexDirection": "row",
                                        "flexShrink": 0,
                                      }
                    }
          >
                    <div
                              style={
                                        Object {
                                                  "alignItems": "flex-end",
                                                  "display": "flex",
                                                  "flexGrow": 1,
                                                  "overflowX": "auto",
                                                  "overflowY": "hidden",
                                                  "padding": "0 5px",
                                                }
                              }
                    >
                              <AddTab
                                        clickAddTab={[Function]}
                              />
                    </div>
                    <div
                              style={
                                        Object {
                                                  "backgroundColor": "rgba(255, 255, 255, 0.4)",
                                                  "color": "white",
                                                  "display": "flex",
                                                }
                              }
                    >
                              <div
                                        style={
                                                  Object {
                                                            "backgroundColor": "rgba(255, 255, 255, 0.8)",
                                                            "height": "35px",
                                                            "width": "35px",
                                                          }
                                        }
                              >
                                        <img
                                                  src="https://a.ppy.sh/1_1262304000000.jpg"
                                                  style={
                                                            Object {
                                                                      "maxHeight": "100%",
                                                                    }
                                                  }
                                        />
                              </div>
                              <div
                                        style={
                                                  Object {
                                                            "alignItems": "center",
                                                            "display": "flex",
                                                            "padding": 5,
                                                          }
                                        }
                              />
                    </div>
          </div>
          <ChatView
                    messages={Array []}
                    selfNick=""
                    style={
                              Object {
                                        "flexGrow": 1,
                                        "marginBottom": 10,
                                        "overflowX": "hidden",
                                        "overflowY": "auto",
                                        "wordBreak": "break-word",
                                      }
                    }
                    userClicked={[Function]}
          />
          <form
                    onSubmit={[Function]}
                    style={
                              Object {
                                        "display": "flex",
                                        "flexShrink": 0,
                                        "height": 40,
                                      }
                    }
          >
                    <input
                              onChange={[Function]}
                              placeholder="Enter a message..."
                              style={
                                        Object {
                                                  "padding": 10,
                                                }
                              }
                              type="text"
                              value=""
                    />
                    <input
                              style={
                                        Object {
                                                  "width": 200,
                                                }
                              }
                              type="submit"
                              value="Send"
                    />
          </form>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          style={
                    Object {
                              "display": "flex",
                              "flexDirection": "column",
                              "height": "100%",
                              "overflow": "hidden",
                              "width": "100%",
                            }
          }
>
          <JoinModal
                    isOpen={false}
                    joinChannel={[Function]}
                    onClose={[Function]}
          />
          <div
                    style={
                              Object {
                                        "backgroundColor": "#FE4590",
                                        "display": "flex",
                                        "flexDirection": "row",
                                        "flexShrink": 0,
                                      }
                    }
          >
                    <div
                              style={
                                        Object {
                                                  "alignItems": "flex-end",
                                                  "display": "flex",
                                                  "flexGrow": 1,
                                                  "overflowX": "auto",
                                                  "overflowY": "hidden",
                                                  "padding": "0 5px",
                                                }
                              }
                    >
                              <AddTab
                                        clickAddTab={[Function]}
                              />
                    </div>
                    <div
                              style={
                                        Object {
                                                  "backgroundColor": "rgba(255, 255, 255, 0.4)",
                                                  "color": "white",
                                                  "display": "flex",
                                                }
                              }
                    >
                              <div
                                        style={
                                                  Object {
                                                            "backgroundColor": "rgba(255, 255, 255, 0.8)",
                                                            "height": "35px",
                                                            "width": "35px",
                                                          }
                                        }
                              >
                                        <img
                                                  src="https://a.ppy.sh/1_1262304000000.jpg"
                                                  style={
                                                            Object {
                                                                      "maxHeight": "100%",
                                                                    }
                                                  }
                                        />
                              </div>
                              <div
                                        style={
                                                  Object {
                                                            "alignItems": "center",
                                                            "display": "flex",
                                                            "padding": 5,
                                                          }
                                        }
                              />
                    </div>
          </div>
          <ChatView
                    messages={Array []}
                    selfNick=""
                    style={
                              Object {
                                        "flexGrow": 1,
                                        "marginBottom": 10,
                                        "overflowX": "hidden",
                                        "overflowY": "auto",
                                        "wordBreak": "break-word",
                                      }
                    }
                    userClicked={[Function]}
          />
          <form
                    onSubmit={[Function]}
                    style={
                              Object {
                                        "display": "flex",
                                        "flexShrink": 0,
                                        "height": 40,
                                      }
                    }
          >
                    <input
                              onChange={[Function]}
                              placeholder="Enter a message..."
                              style={
                                        Object {
                                                  "padding": 10,
                                                }
                              }
                              type="text"
                              value=""
                    />
                    <input
                              style={
                                        Object {
                                                  "width": 200,
                                                }
                              }
                              type="submit"
                              value="Send"
                    />
          </form>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Client
    channelLength={5}
    channels={Array []}
    closeChannel={[Function]}
    currentChannel=""
    joinChannel={[Function]}
    makeCurrentChannel={[Function]}
    messages={Array []}
    nick=""
    openExternal={[Function]}
    sendMessage={[Function]}
    userId={1}
/>,
}
`;
