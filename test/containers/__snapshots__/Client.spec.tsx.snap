// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Client should mount with channel tabs 1`] = `
<DragDropContext(Client)
  channelLength={5}
  closeChannel={[Function]}
  currentChannel=""
  joinChannel={[Function]}
  makeCurrentChannel={[Function]}
  messages={Array []}
  nick=""
  openExternal={[Function]}
  sendMessage={[Function]}
  tabs={
    Array [
      "one",
      "two",
    ]
  }
  userId={1}
>
  <Client
    channelLength={5}
    closeChannel={[Function]}
    currentChannel=""
    joinChannel={[Function]}
    makeCurrentChannel={[Function]}
    messages={Array []}
    nick=""
    openExternal={[Function]}
    sendMessage={[Function]}
    tabs={
      Array [
        "one",
        "two",
      ]
    }
    userId={1}
  >
    <div
      style={
        Object {
          "display": "flex",
          "flexDirection": "column",
          "height": "100%",
          "overflow": "hidden",
          "width": "100%",
        }
      }
    >
      <JoinModal
        isOpen={false}
        joinChannel={[Function]}
        onClose={[Function]}
      >
        <Modal
          ariaHideApp={true}
          bodyOpenClassName="ReactModal__Body--open"
          closeTimeoutMS={0}
          contentLabel="Join channel"
          isOpen={false}
          onRequestClose={[Function]}
          parentSelector={[Function]}
          portalClassName="ReactModalPortal"
          shouldCloseOnOverlayClick={true}
          style={
            Object {
              "content": Object {
                "bottom": "auto",
                "left": "50%",
                "marginRight": "-50%",
                "right": "auto",
                "top": "50%",
                "transform": "translate(-50%, -50%)",
              },
            }
          }
        />
      </JoinModal>
      <div
        style={
          Object {
            "backgroundBlendMode": "multiply",
            "backgroundColor": "rgba(198, 18, 125, 1)",
            "backgroundImage": "url(../src/assets/images/bg-light.png)",
            "display": "flex",
            "flexDirection": "row",
            "flexShrink": 0,
          }
        }
      >
        <TabBar
          currentChannel=""
          tabAdd={[Function]}
          tabClick={[Function]}
          tabClose={[Function]}
          tabs={
            Array [
              "one",
              "two",
            ]
          }
        >
          <FlipMovePropConverter
            delay={0}
            disableAllAnimations={false}
            duration={125}
            easing="ease-out"
            enterAnimation="elevator"
            getPosition={[Function]}
            leaveAnimation="elevator"
            maintainContainerHeight={false}
            staggerDelayBy={0}
            staggerDurationBy={0}
            style={
              Object {
                "alignItems": "flex-end",
                "display": "flex",
                "flexGrow": 1,
                "overflowX": "auto",
                "overflowY": "hidden",
                "padding": "0 5px",
              }
            }
            typeName="div"
            verticalAlignment="top"
          >
            <FlipMove
              delay={0}
              delegated={
                Object {
                  "style": Object {
                    "alignItems": "flex-end",
                    "display": "flex",
                    "flexGrow": 1,
                    "overflowX": "auto",
                    "overflowY": "hidden",
                    "padding": "0 5px",
                    "position": "relative",
                  },
                }
              }
              disableAllAnimations={false}
              duration={125}
              easing="ease-out"
              enterAnimation={
                Object {
                  "from": Object {
                    "opacity": "0",
                    "transform": "scale(0)",
                  },
                  "to": Object {
                    "opacity": "",
                    "transform": "",
                  },
                }
              }
              getPosition={[Function]}
              leaveAnimation={
                Object {
                  "from": Object {
                    "opacity": "1",
                    "transform": "scale(1)",
                  },
                  "to": Object {
                    "opacity": "0",
                    "transform": "scale(0)",
                  },
                }
              }
              maintainContainerHeight={false}
              staggerDelayBy={0}
              staggerDurationBy={0}
              typeName="div"
              verticalAlignment="top"
            >
              <div
                style={
                  Object {
                    "alignItems": "flex-end",
                    "display": "flex",
                    "flexGrow": 1,
                    "overflowX": "auto",
                    "overflowY": "hidden",
                    "padding": "0 5px",
                    "position": "relative",
                  }
                }
              >
                <DropTarget(DragSource(Tab))
                  closeTab={[Function]}
                  index={0}
                  isActive={false}
                  tabClick={[Function]}
                  tabName="one"
                >
                  <DragSource(Tab)
                    closeTab={[Function]}
                    connectDropTarget={[Function]}
                    index={0}
                    isActive={false}
                    isOver={false}
                    tabClick={[Function]}
                    tabName="one"
                  >
                    <Tab
                      closeTab={[Function]}
                      connectDragSource={[Function]}
                      connectDropTarget={[Function]}
                      index={0}
                      isActive={false}
                      isDragging={false}
                      isOver={false}
                      tabClick={[Function]}
                      tabName="one"
                    >
                      <div
                        onClick={[Function]}
                        onMouseDown={[Function]}
                        style={
                          Object {
                            "WebkitUserSelect": "none",
                            "alignItems": "center",
                            "backgroundColor": "rgba(255, 255, 255, 0.15)",
                            "boxSizing": "border-box",
                            "color": "white",
                            "cursor": "pointer",
                            "display": "flex",
                            "fontWeight": 800,
                            "height": 25,
                            "margin": "0 2px",
                            "padding": "0 0 0 10px",
                          }
                        }
                      >
                        <div>
                          one
                        </div>
                        <div
                          onClick={[Function]}
                          style={
                            Object {
                              "alignItems": "center",
                              "backgroundColor": "rgba(255, 255, 255, 0.15)",
                              "display": "flex",
                              "fontWeight": 400,
                              "height": "100%",
                              "margin": "0 0 0 10px",
                              "padding": "0 10px",
                            }
                          }
                        >
                          Ã—
                        </div>
                      </div>
                    </Tab>
                  </DragSource(Tab)>
                </DropTarget(DragSource(Tab))>
                <DropTarget(DragSource(Tab))
                  closeTab={[Function]}
                  index={1}
                  isActive={false}
                  tabClick={[Function]}
                  tabName="two"
                >
                  <DragSource(Tab)
                    closeTab={[Function]}
                    connectDropTarget={[Function]}
                    index={1}
                    isActive={false}
                    isOver={false}
                    tabClick={[Function]}
                    tabName="two"
                  >
                    <Tab
                      closeTab={[Function]}
                      connectDragSource={[Function]}
                      connectDropTarget={[Function]}
                      index={1}
                      isActive={false}
                      isDragging={false}
                      isOver={false}
                      tabClick={[Function]}
                      tabName="two"
                    >
                      <div
                        onClick={[Function]}
                        onMouseDown={[Function]}
                        style={
                          Object {
                            "WebkitUserSelect": "none",
                            "alignItems": "center",
                            "backgroundColor": "rgba(255, 255, 255, 0.15)",
                            "boxSizing": "border-box",
                            "color": "white",
                            "cursor": "pointer",
                            "display": "flex",
                            "fontWeight": 800,
                            "height": 25,
                            "margin": "0 2px",
                            "padding": "0 0 0 10px",
                          }
                        }
                      >
                        <div>
                          two
                        </div>
                        <div
                          onClick={[Function]}
                          style={
                            Object {
                              "alignItems": "center",
                              "backgroundColor": "rgba(255, 255, 255, 0.15)",
                              "display": "flex",
                              "fontWeight": 400,
                              "height": "100%",
                              "margin": "0 0 0 10px",
                              "padding": "0 10px",
                            }
                          }
                        >
                          Ã—
                        </div>
                      </div>
                    </Tab>
                  </DragSource(Tab)>
                </DropTarget(DragSource(Tab))>
                <AddTab
                  clickAddTab={[Function]}
                >
                  <div
                    onClick={[Function]}
                    style={
                      Object {
                        "WebkitUserSelect": "none",
                        "alignItems": "center",
                        "backgroundColor": "rgb(241, 196, 15)",
                        "boxSizing": "border-box",
                        "color": "white",
                        "cursor": "pointer",
                        "display": "flex",
                        "fontWeight": 800,
                        "height": 25,
                        "margin": "0 2px",
                        "padding": "10px",
                      }
                    }
                  >
                    +
                  </div>
                </AddTab>
              </div>
            </FlipMove>
          </FlipMovePropConverter>
        </TabBar>
        <div
          style={
            Object {
              "backgroundColor": "rgba(255, 255, 255, 0.4)",
              "color": "white",
              "display": "flex",
            }
          }
        >
          <div
            style={
              Object {
                "backgroundColor": "rgba(255, 255, 255, 0.8)",
                "height": "35px",
                "width": "35px",
              }
            }
          >
            <img
              src="https://a.ppy.sh/1_1262304000000.jpg"
              style={
                Object {
                  "maxHeight": "100%",
                }
              }
            />
          </div>
          <div
            style={
              Object {
                "alignItems": "center",
                "display": "flex",
                "padding": 5,
              }
            }
          />
          <div
            style={
              Object {
                "alignContent": "center",
                "alignItems": "center",
                "backgroundColor": "rgba(255, 0, 0, 0.5)",
                "cursor": "pointer",
                "display": "flex",
                "flexDirection": "column",
                "height": "35px",
                "justifyContent": "center",
                "width": "35px",
              }
            }
          >
            <i
              className="fa fa-sign-out"
            />
          </div>
        </div>
      </div>
      <ChatView
        messages={Array []}
        selfNick=""
        style={
          Object {
            "flexGrow": 1,
            "marginBottom": 10,
            "overflowX": "hidden",
            "overflowY": "auto",
            "wordBreak": "break-word",
          }
        }
        userClicked={[Function]}
      >
        <div
          style={
            Object {
              "flexGrow": 1,
              "marginBottom": 10,
              "overflowX": "hidden",
              "overflowY": "auto",
              "wordBreak": "break-word",
            }
          }
        />
      </ChatView>
      <form
        onSubmit={[Function]}
        style={
          Object {
            "display": "flex",
            "flexShrink": 0,
            "height": 40,
          }
        }
      >
        <input
          onChange={[Function]}
          placeholder="Enter a message..."
          style={
            Object {
              "padding": 10,
            }
          }
          type="text"
          value=""
        />
        <input
          style={
            Object {
              "width": 200,
            }
          }
          type="submit"
          value="Send"
        />
      </form>
    </div>
  </Client>
</DragDropContext(Client)>
`;

exports[`Client should render 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    style={
        Object {
            "display": "flex",
            "flexDirection": "column",
            "height": "100%",
            "overflow": "hidden",
            "width": "100%",
          }
    }
>
    <JoinModal
        isOpen={false}
        joinChannel={[Function]}
        onClose={[Function]}
    />
    <div
        style={
            Object {
                "backgroundBlendMode": "multiply",
                "backgroundColor": "rgba(198, 18, 125, 1)",
                "backgroundImage": "url(../src/assets/images/bg-light.png)",
                "display": "flex",
                "flexDirection": "row",
                "flexShrink": 0,
              }
        }
    >
        <TabBar
            currentChannel=""
            tabAdd={[Function]}
            tabClick={[Function]}
            tabClose={[Function]}
            tabMove={[Function]}
            tabs={Array []}
        />
        <div
            style={
                Object {
                    "backgroundColor": "rgba(255, 255, 255, 0.4)",
                    "color": "white",
                    "display": "flex",
                  }
            }
        >
            <div
                style={
                    Object {
                        "backgroundColor": "rgba(255, 255, 255, 0.8)",
                        "height": "35px",
                        "width": "35px",
                      }
                }
            >
                <img
                    src="https://a.ppy.sh/1_1262304000000.jpg"
                    style={
                        Object {
                            "maxHeight": "100%",
                          }
                    }
                />
            </div>
            <div
                style={
                    Object {
                        "alignItems": "center",
                        "display": "flex",
                        "padding": 5,
                      }
                }
            />
            <div
                onClick={[Function]}
                style={
                    Object {
                        "alignContent": "center",
                        "alignItems": "center",
                        "backgroundColor": "rgba(255, 0, 0, 0.5)",
                        "cursor": "pointer",
                        "display": "flex",
                        "flexDirection": "column",
                        "height": "35px",
                        "justifyContent": "center",
                        "width": "35px",
                      }
                }
            >
                <i
                    className="fa fa-sign-out"
                />
            </div>
        </div>
    </div>
    <ChatView
        messages={Array []}
        selfNick=""
        style={
            Object {
                "flexGrow": 1,
                "marginBottom": 10,
                "overflowX": "hidden",
                "overflowY": "auto",
                "wordBreak": "break-word",
              }
        }
        userClicked={[Function]}
    />
    <form
        onSubmit={[Function]}
        style={
            Object {
                "display": "flex",
                "flexShrink": 0,
                "height": 40,
              }
        }
    >
        <input
            onChange={[Function]}
            placeholder="Enter a message..."
            style={
                Object {
                    "padding": 10,
                  }
            }
            type="text"
            value=""
        />
        <input
            style={
                Object {
                    "width": 200,
                  }
            }
            type="submit"
            value="Send"
        />
    </form>
</div>,
  "nodes": Array [
    <div
      style={
            Object {
                  "display": "flex",
                  "flexDirection": "column",
                  "height": "100%",
                  "overflow": "hidden",
                  "width": "100%",
                }
      }
>
      <JoinModal
            isOpen={false}
            joinChannel={[Function]}
            onClose={[Function]}
      />
      <div
            style={
                  Object {
                        "backgroundBlendMode": "multiply",
                        "backgroundColor": "rgba(198, 18, 125, 1)",
                        "backgroundImage": "url(../src/assets/images/bg-light.png)",
                        "display": "flex",
                        "flexDirection": "row",
                        "flexShrink": 0,
                      }
            }
      >
            <TabBar
                  currentChannel=""
                  tabAdd={[Function]}
                  tabClick={[Function]}
                  tabClose={[Function]}
                  tabMove={[Function]}
                  tabs={Array []}
            />
            <div
                  style={
                        Object {
                              "backgroundColor": "rgba(255, 255, 255, 0.4)",
                              "color": "white",
                              "display": "flex",
                            }
                  }
            >
                  <div
                        style={
                              Object {
                                    "backgroundColor": "rgba(255, 255, 255, 0.8)",
                                    "height": "35px",
                                    "width": "35px",
                                  }
                        }
                  >
                        <img
                              src="https://a.ppy.sh/1_1262304000000.jpg"
                              style={
                                    Object {
                                          "maxHeight": "100%",
                                        }
                              }
                        />
                  </div>
                  <div
                        style={
                              Object {
                                    "alignItems": "center",
                                    "display": "flex",
                                    "padding": 5,
                                  }
                        }
                  />
                  <div
                        onClick={[Function]}
                        style={
                              Object {
                                    "alignContent": "center",
                                    "alignItems": "center",
                                    "backgroundColor": "rgba(255, 0, 0, 0.5)",
                                    "cursor": "pointer",
                                    "display": "flex",
                                    "flexDirection": "column",
                                    "height": "35px",
                                    "justifyContent": "center",
                                    "width": "35px",
                                  }
                        }
                  >
                        <i
                              className="fa fa-sign-out"
                        />
                  </div>
            </div>
      </div>
      <ChatView
            messages={Array []}
            selfNick=""
            style={
                  Object {
                        "flexGrow": 1,
                        "marginBottom": 10,
                        "overflowX": "hidden",
                        "overflowY": "auto",
                        "wordBreak": "break-word",
                      }
            }
            userClicked={[Function]}
      />
      <form
            onSubmit={[Function]}
            style={
                  Object {
                        "display": "flex",
                        "flexShrink": 0,
                        "height": 40,
                      }
            }
      >
            <input
                  onChange={[Function]}
                  placeholder="Enter a message..."
                  style={
                        Object {
                              "padding": 10,
                            }
                  }
                  type="text"
                  value=""
            />
            <input
                  style={
                        Object {
                              "width": 200,
                            }
                  }
                  type="submit"
                  value="Send"
            />
      </form>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Client
        channelLength={5}
        channels={Array []}
        closeChannel={[Function]}
        currentChannel=""
        joinChannel={[Function]}
        logout={[Function]}
        makeCurrentChannel={[Function]}
        messages={Array []}
        nick=""
        openExternal={[Function]}
        sendCommand={[Function]}
        sendMessage={[Function]}
        tabMove={[Function]}
        tabs={Array []}
        userId={1}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Client {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "displayMessages": Array [],
        "displayMessagesAmount": 50,
        "handleChangeMsg": [Function],
        "handleSubmit": [Function],
        "hideJoinModal": [Function],
        "props": Object {
          "channelLength": 5,
          "channels": Array [],
          "closeChannel": [Function],
          "currentChannel": "",
          "joinChannel": [Function],
          "logout": [Function],
          "makeCurrentChannel": [Function],
          "messages": Array [],
          "nick": "",
          "openExternal": [Function],
          "sendCommand": [Function],
          "sendMessage": [Function],
          "tabMove": [Function],
          "tabs": Array [],
          "userId": 1,
        },
        "refs": Object {},
        "showJoinModal": [Function],
        "state": Object {
          "msg": "",
          "showJoinModal": false,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
        "userClicked": [Function],
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          style={
                    Object {
                              "display": "flex",
                              "flexDirection": "column",
                              "height": "100%",
                              "overflow": "hidden",
                              "width": "100%",
                            }
          }
>
          <JoinModal
                    isOpen={false}
                    joinChannel={[Function]}
                    onClose={[Function]}
          />
          <div
                    style={
                              Object {
                                        "backgroundBlendMode": "multiply",
                                        "backgroundColor": "rgba(198, 18, 125, 1)",
                                        "backgroundImage": "url(../src/assets/images/bg-light.png)",
                                        "display": "flex",
                                        "flexDirection": "row",
                                        "flexShrink": 0,
                                      }
                    }
          >
                    <TabBar
                              currentChannel=""
                              tabAdd={[Function]}
                              tabClick={[Function]}
                              tabClose={[Function]}
                              tabMove={[Function]}
                              tabs={Array []}
                    />
                    <div
                              style={
                                        Object {
                                                  "backgroundColor": "rgba(255, 255, 255, 0.4)",
                                                  "color": "white",
                                                  "display": "flex",
                                                }
                              }
                    >
                              <div
                                        style={
                                                  Object {
                                                            "backgroundColor": "rgba(255, 255, 255, 0.8)",
                                                            "height": "35px",
                                                            "width": "35px",
                                                          }
                                        }
                              >
                                        <img
                                                  src="https://a.ppy.sh/1_1262304000000.jpg"
                                                  style={
                                                            Object {
                                                                      "maxHeight": "100%",
                                                                    }
                                                  }
                                        />
                              </div>
                              <div
                                        style={
                                                  Object {
                                                            "alignItems": "center",
                                                            "display": "flex",
                                                            "padding": 5,
                                                          }
                                        }
                              />
                              <div
                                        onClick={[Function]}
                                        style={
                                                  Object {
                                                            "alignContent": "center",
                                                            "alignItems": "center",
                                                            "backgroundColor": "rgba(255, 0, 0, 0.5)",
                                                            "cursor": "pointer",
                                                            "display": "flex",
                                                            "flexDirection": "column",
                                                            "height": "35px",
                                                            "justifyContent": "center",
                                                            "width": "35px",
                                                          }
                                        }
                              >
                                        <i
                                                  className="fa fa-sign-out"
                                        />
                              </div>
                    </div>
          </div>
          <ChatView
                    messages={Array []}
                    selfNick=""
                    style={
                              Object {
                                        "flexGrow": 1,
                                        "marginBottom": 10,
                                        "overflowX": "hidden",
                                        "overflowY": "auto",
                                        "wordBreak": "break-word",
                                      }
                    }
                    userClicked={[Function]}
          />
          <form
                    onSubmit={[Function]}
                    style={
                              Object {
                                        "display": "flex",
                                        "flexShrink": 0,
                                        "height": 40,
                                      }
                    }
          >
                    <input
                              onChange={[Function]}
                              placeholder="Enter a message..."
                              style={
                                        Object {
                                                  "padding": 10,
                                                }
                              }
                              type="text"
                              value=""
                    />
                    <input
                              style={
                                        Object {
                                                  "width": 200,
                                                }
                              }
                              type="submit"
                              value="Send"
                    />
          </form>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          style={
                    Object {
                              "display": "flex",
                              "flexDirection": "column",
                              "height": "100%",
                              "overflow": "hidden",
                              "width": "100%",
                            }
          }
>
          <JoinModal
                    isOpen={false}
                    joinChannel={[Function]}
                    onClose={[Function]}
          />
          <div
                    style={
                              Object {
                                        "backgroundBlendMode": "multiply",
                                        "backgroundColor": "rgba(198, 18, 125, 1)",
                                        "backgroundImage": "url(../src/assets/images/bg-light.png)",
                                        "display": "flex",
                                        "flexDirection": "row",
                                        "flexShrink": 0,
                                      }
                    }
          >
                    <TabBar
                              currentChannel=""
                              tabAdd={[Function]}
                              tabClick={[Function]}
                              tabClose={[Function]}
                              tabMove={[Function]}
                              tabs={Array []}
                    />
                    <div
                              style={
                                        Object {
                                                  "backgroundColor": "rgba(255, 255, 255, 0.4)",
                                                  "color": "white",
                                                  "display": "flex",
                                                }
                              }
                    >
                              <div
                                        style={
                                                  Object {
                                                            "backgroundColor": "rgba(255, 255, 255, 0.8)",
                                                            "height": "35px",
                                                            "width": "35px",
                                                          }
                                        }
                              >
                                        <img
                                                  src="https://a.ppy.sh/1_1262304000000.jpg"
                                                  style={
                                                            Object {
                                                                      "maxHeight": "100%",
                                                                    }
                                                  }
                                        />
                              </div>
                              <div
                                        style={
                                                  Object {
                                                            "alignItems": "center",
                                                            "display": "flex",
                                                            "padding": 5,
                                                          }
                                        }
                              />
                              <div
                                        onClick={[Function]}
                                        style={
                                                  Object {
                                                            "alignContent": "center",
                                                            "alignItems": "center",
                                                            "backgroundColor": "rgba(255, 0, 0, 0.5)",
                                                            "cursor": "pointer",
                                                            "display": "flex",
                                                            "flexDirection": "column",
                                                            "height": "35px",
                                                            "justifyContent": "center",
                                                            "width": "35px",
                                                          }
                                        }
                              >
                                        <i
                                                  className="fa fa-sign-out"
                                        />
                              </div>
                    </div>
          </div>
          <ChatView
                    messages={Array []}
                    selfNick=""
                    style={
                              Object {
                                        "flexGrow": 1,
                                        "marginBottom": 10,
                                        "overflowX": "hidden",
                                        "overflowY": "auto",
                                        "wordBreak": "break-word",
                                      }
                    }
                    userClicked={[Function]}
          />
          <form
                    onSubmit={[Function]}
                    style={
                              Object {
                                        "display": "flex",
                                        "flexShrink": 0,
                                        "height": 40,
                                      }
                    }
          >
                    <input
                              onChange={[Function]}
                              placeholder="Enter a message..."
                              style={
                                        Object {
                                                  "padding": 10,
                                                }
                              }
                              type="text"
                              value=""
                    />
                    <input
                              style={
                                        Object {
                                                  "width": 200,
                                                }
                              }
                              type="submit"
                              value="Send"
                    />
          </form>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Client
    channelLength={5}
    channels={Array []}
    closeChannel={[Function]}
    currentChannel=""
    joinChannel={[Function]}
    logout={[Function]}
    makeCurrentChannel={[Function]}
    messages={Array []}
    nick=""
    openExternal={[Function]}
    sendCommand={[Function]}
    sendMessage={[Function]}
    tabMove={[Function]}
    tabs={Array []}
    userId={1}
/>,
}
`;
