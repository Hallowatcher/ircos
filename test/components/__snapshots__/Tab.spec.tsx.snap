// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddTab should render 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    style={
        Object {
            "WebkitUserSelect": "none",
            "alignItems": "center",
            "backgroundColor": "rgba(255, 255, 255, 0.3)",
            "boxSizing": "border-box",
            "color": "white",
            "cursor": "pointer",
            "display": "flex",
            "fontWeight": 800,
            "height": 25,
            "margin": "0 2px",
            "padding": "0 0 0 10px",
            "transform": "skew(-15deg)",
          }
    }
>
    <div
        onClick={[Function]}
        style={
            Object {
                "transform": "skew(15deg)",
              }
        }
    >
        foo123
    </div>
    <div
        onClick={[Function]}
        style={
            Object {
                "alignItems": "center",
                "backgroundColor": "rgba(255, 255, 255, 0.15)",
                "display": "flex",
                "fontWeight": 400,
                "height": "100%",
                "margin": "0 0 0 10px",
                "padding": "0 10px",
              }
        }
    >
        ×
    </div>
</div>,
  "nodes": Array [
    <div
      style={
            Object {
                  "WebkitUserSelect": "none",
                  "alignItems": "center",
                  "backgroundColor": "rgba(255, 255, 255, 0.3)",
                  "boxSizing": "border-box",
                  "color": "white",
                  "cursor": "pointer",
                  "display": "flex",
                  "fontWeight": 800,
                  "height": 25,
                  "margin": "0 2px",
                  "padding": "0 0 0 10px",
                  "transform": "skew(-15deg)",
                }
      }
>
      <div
            onClick={[Function]}
            style={
                  Object {
                        "transform": "skew(15deg)",
                      }
            }
      >
            foo123
      </div>
      <div
            onClick={[Function]}
            style={
                  Object {
                        "alignItems": "center",
                        "backgroundColor": "rgba(255, 255, 255, 0.15)",
                        "display": "flex",
                        "fontWeight": 400,
                        "height": "100%",
                        "margin": "0 0 0 10px",
                        "padding": "0 10px",
                      }
            }
      >
            ×
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Tab
        closeTab={[Function]}
        isActive={true}
        tabClick={[Function]}
        tabName="foo123"
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Tab {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "closeTab": [Function],
          "isActive": true,
          "tabClick": [Function],
          "tabName": "foo123",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          style={
                    Object {
                              "WebkitUserSelect": "none",
                              "alignItems": "center",
                              "backgroundColor": "rgba(255, 255, 255, 0.3)",
                              "boxSizing": "border-box",
                              "color": "white",
                              "cursor": "pointer",
                              "display": "flex",
                              "fontWeight": 800,
                              "height": 25,
                              "margin": "0 2px",
                              "padding": "0 0 0 10px",
                              "transform": "skew(-15deg)",
                            }
          }
>
          <div
                    onClick={[Function]}
                    style={
                              Object {
                                        "transform": "skew(15deg)",
                                      }
                    }
          >
                    foo123
          </div>
          <div
                    onClick={[Function]}
                    style={
                              Object {
                                        "alignItems": "center",
                                        "backgroundColor": "rgba(255, 255, 255, 0.15)",
                                        "display": "flex",
                                        "fontWeight": 400,
                                        "height": "100%",
                                        "margin": "0 0 0 10px",
                                        "padding": "0 10px",
                                      }
                    }
          >
                    ×
          </div>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          style={
                    Object {
                              "WebkitUserSelect": "none",
                              "alignItems": "center",
                              "backgroundColor": "rgba(255, 255, 255, 0.3)",
                              "boxSizing": "border-box",
                              "color": "white",
                              "cursor": "pointer",
                              "display": "flex",
                              "fontWeight": 800,
                              "height": 25,
                              "margin": "0 2px",
                              "padding": "0 0 0 10px",
                              "transform": "skew(-15deg)",
                            }
          }
>
          <div
                    onClick={[Function]}
                    style={
                              Object {
                                        "transform": "skew(15deg)",
                                      }
                    }
          >
                    foo123
          </div>
          <div
                    onClick={[Function]}
                    style={
                              Object {
                                        "alignItems": "center",
                                        "backgroundColor": "rgba(255, 255, 255, 0.15)",
                                        "display": "flex",
                                        "fontWeight": 400,
                                        "height": "100%",
                                        "margin": "0 0 0 10px",
                                        "padding": "0 10px",
                                      }
                    }
          >
                    ×
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Tab
    closeTab={[Function]}
    isActive={true}
    tabClick={[Function]}
    tabName="foo123"
/>,
}
`;

exports[`AddTab should render with inactive class 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    style={
        Object {
            "WebkitUserSelect": "none",
            "alignItems": "center",
            "backgroundColor": "rgba(255, 255, 255, 0.1)",
            "boxSizing": "border-box",
            "color": "white",
            "cursor": "pointer",
            "display": "flex",
            "fontWeight": 800,
            "height": 25,
            "margin": "0 2px",
            "padding": "0 0 0 10px",
            "transform": "skew(-15deg)",
          }
    }
>
    <div
        onClick={[Function]}
        style={
            Object {
                "transform": "skew(15deg)",
              }
        }
    >
        foo123
    </div>
    <div
        onClick={[Function]}
        style={
            Object {
                "alignItems": "center",
                "backgroundColor": "rgba(255, 255, 255, 0.15)",
                "display": "flex",
                "fontWeight": 400,
                "height": "100%",
                "margin": "0 0 0 10px",
                "padding": "0 10px",
              }
        }
    >
        ×
    </div>
</div>,
  "nodes": Array [
    <div
      style={
            Object {
                  "WebkitUserSelect": "none",
                  "alignItems": "center",
                  "backgroundColor": "rgba(255, 255, 255, 0.1)",
                  "boxSizing": "border-box",
                  "color": "white",
                  "cursor": "pointer",
                  "display": "flex",
                  "fontWeight": 800,
                  "height": 25,
                  "margin": "0 2px",
                  "padding": "0 0 0 10px",
                  "transform": "skew(-15deg)",
                }
      }
>
      <div
            onClick={[Function]}
            style={
                  Object {
                        "transform": "skew(15deg)",
                      }
            }
      >
            foo123
      </div>
      <div
            onClick={[Function]}
            style={
                  Object {
                        "alignItems": "center",
                        "backgroundColor": "rgba(255, 255, 255, 0.15)",
                        "display": "flex",
                        "fontWeight": 400,
                        "height": "100%",
                        "margin": "0 0 0 10px",
                        "padding": "0 10px",
                      }
            }
      >
            ×
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Tab
        closeTab={[Function]}
        isActive={false}
        tabClick={[Function]}
        tabName="foo123"
/>,
      "_debugID": 7,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Tab {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "closeTab": [Function],
          "isActive": false,
          "tabClick": [Function],
          "tabName": "foo123",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 4,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          style={
                    Object {
                              "WebkitUserSelect": "none",
                              "alignItems": "center",
                              "backgroundColor": "rgba(255, 255, 255, 0.1)",
                              "boxSizing": "border-box",
                              "color": "white",
                              "cursor": "pointer",
                              "display": "flex",
                              "fontWeight": 800,
                              "height": 25,
                              "margin": "0 2px",
                              "padding": "0 0 0 10px",
                              "transform": "skew(-15deg)",
                            }
          }
>
          <div
                    onClick={[Function]}
                    style={
                              Object {
                                        "transform": "skew(15deg)",
                                      }
                    }
          >
                    foo123
          </div>
          <div
                    onClick={[Function]}
                    style={
                              Object {
                                        "alignItems": "center",
                                        "backgroundColor": "rgba(255, 255, 255, 0.15)",
                                        "display": "flex",
                                        "fontWeight": 400,
                                        "height": "100%",
                                        "margin": "0 0 0 10px",
                                        "padding": "0 10px",
                                      }
                    }
          >
                    ×
          </div>
</div>,
        "_debugID": 8,
        "_renderedOutput": <div
          style={
                    Object {
                              "WebkitUserSelect": "none",
                              "alignItems": "center",
                              "backgroundColor": "rgba(255, 255, 255, 0.1)",
                              "boxSizing": "border-box",
                              "color": "white",
                              "cursor": "pointer",
                              "display": "flex",
                              "fontWeight": 800,
                              "height": 25,
                              "margin": "0 2px",
                              "padding": "0 0 0 10px",
                              "transform": "skew(-15deg)",
                            }
          }
>
          <div
                    onClick={[Function]}
                    style={
                              Object {
                                        "transform": "skew(15deg)",
                                      }
                    }
          >
                    foo123
          </div>
          <div
                    onClick={[Function]}
                    style={
                              Object {
                                        "alignItems": "center",
                                        "backgroundColor": "rgba(255, 255, 255, 0.15)",
                                        "display": "flex",
                                        "fontWeight": 400,
                                        "height": "100%",
                                        "margin": "0 0 0 10px",
                                        "padding": "0 10px",
                                      }
                    }
          >
                    ×
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Tab
    closeTab={[Function]}
    isActive={false}
    tabClick={[Function]}
    tabName="foo123"
/>,
}
`;
